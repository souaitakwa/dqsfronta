import { Component, OnInit } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import { TableData } from '../md/md-table/md-table.component';
import { AuthService } from '../services/auth.service';

@Component({
  selector: 'app-resultga',
  templateUrl: './resultga.component.html',
  styleUrls: ['./resultga.component.css']
})
export class ResultgaComponent implements OnInit {
  public tableData3: TableData;
  hasParam;
  sumOfSessions:any = 0;
  sumOfSelfRefferel :any= 0;
  sumOfPagesViewsPlateformes:any=0;
  sumOfCrawlerRebot:any=0;
  sessions:any=0;
  sumOfPageViews:any=0;
  sumOfHostnames:any=0;
  sumOfPageViewsMutli100:any=0;
  resultsFoundSum:any=0;
  sumOfSessionWithSearch:any=0;
  constructor(private authService: AuthService,private router: Router,
    private route: ActivatedRoute) { }

  ngOnInit(): void {
    this.getDataFromUrl();
    
    this.tableData3 = {
      headerRow: [ 'Control' ],
      dataRows: [
          ['Presence of self referral (acquisition source of client hostname> 5%)' ],
          ['Presence of payment platforms'],
         ['Verification of Adwords association' ],
         ['Suspicion of double tracking'],
          ['CRAWLER spam robot detection' ],
          ['IPs source detection ' ],
          ['GHOSTs robot detection' ],
          ['Detection of development platforms' ],
          ['Traffic volume assigned to Other (default channel only)'],
          ['Quality of utm tracking'],
          ['Medium with low traffic (share of traffic generated by suppots having generated less than 1% of traffic) threshold 10%' ],
          ['Readability of the report All campaigns'],
          ['Enabling internal search tracking' ]




      ]
   };

  }


  getDataFromUrl(){
    // id from url
    this.route.params.subscribe((data) => {
      this.hasParam = data['id'.toString()];
      if(this.hasParam > 0){
        this.getReport();
      }
    });
   
  }
  getReport(){
    //getReports
    let report = {
      'userid':this.hasParam
    };
    //  this.reportsData = [];
    this.authService.getReports(report).subscribe((res:any) => {
      res.result.forEach(element => {
        this.sumOfSessions = parseFloat(this.sumOfSessions) + (parseFloat(element.sessions) * 100);
        this.sumOfSelfRefferel = parseFloat(this.sumOfSelfRefferel) + parseFloat(element.self_Referral);
        this.sumOfPagesViewsPlateformes = parseFloat(this.sumOfPagesViewsPlateformes) + parseFloat(element.pages_views_plateformes);
        this.sumOfCrawlerRebot = parseFloat(this.sumOfCrawlerRebot) + parseFloat(element.enddate);
        this.sessions = parseFloat(this.sessions) + parseFloat(element.sessions);
        this.sumOfPageViews = parseFloat(this.sumOfPageViews) + parseFloat(element.page_views);
        this.sumOfHostnames = parseFloat(this.sumOfHostnames) + parseFloat(element.hostname);
        this.sumOfPageViewsMutli100 = parseFloat(this.sumOfPageViewsMutli100) + (parseFloat(element.page_views) * 100);
        this.resultsFoundSum = parseFloat(this.resultsFoundSum) + parseFloat(element.Results_Found);
        this.sumOfSessionWithSearch  =parseFloat(this.sumOfSessionWithSearch) + parseFloat(element.Sessions_with_Search);
        //sumOfCrawlerRebot
      });

      ////////Presence of self referral (acquisition source of client hostname> 5%) :
      // if(this.sumOfSelfRefferel/this.sumOfSessions > 5){

      // }else{

      // }
      
    });
  }

}
